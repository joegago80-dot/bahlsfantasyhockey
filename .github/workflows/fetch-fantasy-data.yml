name: Fetch Fantasy Hockey Data

permissions:
  contents: write   # allow pushing to repo

on:
  schedule:
    - cron: '30 10 * * *'   # 05:30 EST / 06:30 EDT
  workflow_dispatch:        # manual trigger

jobs:
  fetch-and-commit:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install jq (for JSON parsing)
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Step 3: Fetch combined fantasy data from Pipedream
      - name: Fetch Fantasy Data from Pipedream
        id: fetch_data
        run: |
          echo "📡 Fetching JSON from Pipedream..."
          curl -s -X POST https://eok6o662jtspb86.m.pipedream.net -o fantasyData.tmp.json

          # Validate JSON
          if ! jq empty fantasyData.tmp.json > /dev/null 2>&1; then
            echo "::warning::⚠️ Invalid JSON returned — keeping existing fantasyData.json"
            rm fantasyData.tmp.json
            echo "update_status=skipped" >> $GITHUB_ENV
            exit 0
          fi

          # If no existing data, just create new file
          if [ ! -f fantasyData.json ]; then
            echo "🆕 No existing data — creating new fantasyData.json"
            mv fantasyData.tmp.json fantasyData.json
            echo "update_status=success" >> $GITHUB_ENV
            echo "fetch_time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
            exit 0
          fi

          echo "🔄 Merging existing and new fantasy data (keeping only current week’s matchups)..."
          jq -s '
            def get_matchups(obj):
              (obj.weekly_matchups.WeeklyMatchups // obj.weekly_matchups // []);

            {
              Managed_Team:   (.[0].Managed_Team   + .[1].Managed_Team   | unique),
              standings:      (.[0].standings      + .[1].standings      | unique),
              players:        (.[0].players        + .[1].players        | unique_by(.player_id)),
              weekly_matchups: {
                WeeklyMatchups: get_matchups(.[1])   # 🟢 always take new week’s data
              },
              draft_results:  (.[0].draft_results  + .[1].draft_results  | unique),
              playoffs:       (.[0].playoffs       + .[1].playoffs       | unique),
              transactions:   (.[0].transactions   + .[1].transactions   | unique),
              team_stats:     (.[0].team_stats     + .[1].team_stats     | unique)
            }
          ' fantasyData.json fantasyData.tmp.json > fantasyData.merged.json || {
            echo "::warning::⚠️ Merge failed, keeping existing data"
            rm fantasyData.tmp.json
            echo "update_status=skipped" >> $GITHUB_ENV
            exit 0
          }

          # Compare merged vs existing
          if cmp -s fantasyData.merged.json fantasyData.json; then
            echo "✅ No changes detected — skipping commit"
            rm fantasyData.tmp.json fantasyData.merged.json
            echo "update_status=skipped" >> $GITHUB_ENV
          else
            echo "✅ Data updated successfully"
            mv fantasyData.merged.json fantasyData.json
            rm fantasyData.tmp.json
            echo "update_status=success" >> $GITHUB_ENV
            echo "fetch_time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          fi

      # Step 4: Commit the updated JSON back to the repository
      - name: Commit JSON
        if: env.update_status == 'success'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add fantasyData.json
          git diff --cached --quiet || git commit -m "Update fantasy data"
          git push

      # Step 5: Add Summary for Success
      - name: Report Success
        if: env.update_status == 'success'
        run: |
          echo "## ✅ Fantasy Data Updated" >> $GITHUB_STEP_SUMMARY
          echo "A new **fantasyData.json** was fetched from Pipedream and merged." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📅 Last successful fetch: **${{ env.fetch_time }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Commit message: \`Update fantasy data\`" >> $GITHUB_STEP_SUMMARY
